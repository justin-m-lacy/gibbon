import Engine from './src/engine';
import Component from './src/core/component';
import Systems from './src/systems/systems';
import HtmlWrapper from './src/components/html-wrapper';
import SleepSystem from './src/components/sleepSystem';
import SpriteTiler from './src/components/spriteTiler';
import TimeDestroy from './src/components/timeDestroy';
export { isClonable, isConstructor, } from './src/utils/types';
export type { Clonable, Constructor } from './src/utils/types';
import * as DisplayUtils from './src/utils/displayUtils';
import * as ColorUtils from './src/utils/colorUtils';
import * as DrawUtils from './src/utils/drawUtils';
import { tweenOf, getTween, removeTween } from './src/utils/tweens';
export { IPoint } from './src/core/actor';
import Actor from './src/core/actor';
import DestAccel from './src/components/dest-accel';
import Mover from './src/components/mover';
import Camera from './src/components/camera';
import Library from './src/library';
import Game from './src/game';
import Group from './src/core/group';
import System from './src/system';
import LoadGroup from './src/loadGroup';
import * as Geom from './src/utils/geom';
import * as Rand from './src/utils/rand';
import CanvasDraw from './src/utils/canvas-draw';
export { Engine, Game, Component, System, Actor, Library, Group, LoadGroup, Geom, Rand, Systems, HtmlWrapper, SleepSystem, SpriteTiler, TimeDestroy, DisplayUtils, ColorUtils, CanvasDraw, Mover, DrawUtils, DestAccel, getTween, tweenOf, removeTween };
declare const Gibbon: {
    CanvasDraw: typeof CanvasDraw;
    Components: {
        Component: typeof Component;
        Camera: typeof Camera;
        Mover: typeof Mover;
        SpriteTiler: typeof SpriteTiler;
        TimeDestroy: typeof TimeDestroy;
        HtmlWrapper: typeof HtmlWrapper;
    };
    Systems: {
        BoundsDestroy: typeof import("./src/systems/boundsDestroy").default;
    };
    Utils: {
        Gradient: typeof import("./src/data/gradient").Gradient;
        Color: typeof ColorUtils;
        Geom: typeof Geom;
        Rand: typeof Rand;
    };
    Geom: typeof Geom;
    Engine: typeof Engine;
    System: typeof System;
    Game: typeof Game;
    Group: typeof Group;
    LoadGroup: typeof LoadGroup;
    Component: typeof Component;
    Actor: typeof Actor;
    Library: typeof Library;
    Camera: typeof Camera;
    Mover: typeof Mover;
    Rand: typeof Rand;
};
export default Gibbon;
